<?php
/**
  @file
  @brief The Simple Field module defines a simple
    API for creating common field types.
*/

/**
  @brief Creates a textarea field.
  @param $entity_type (string) the name of the entity type.
  @param $bundle (string) the name of the entity bundle.
  @param $name (string) the field name.
  @param $label (string) the field label.
*/
function simple_field_create_textarea ($entity_type, $bundle, $name, $label) {
  $field    = field_info_field($name);
  $instance = field_info_instance($entity_type, $name, $bundle);
  if (empty($field)) {
    $field = array(
      'field_name'   => $name,
      'type'         => 'text_long',
      'entity_types' => array($entity_type),
    );  
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name'  => $name,
      'entity_type' => $entity_type,
      'bundle'      => $bundle,
      'label'       => $label,
      'widget'      => array('type' => 'text_textarea'),
      'display'     => array(
        'default' => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),  
        'teaser'    => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),  
      ),  
    );  
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
  @brief Creates a text field.
  @param $entity_type (string) the name of the entity type.
  @param $bundle (string) the name of the entity bundle.
  @param $name (string) the field name.
  @param $label (string) the field label.
*/
function simple_field_create_textfield ($entity_type, $bundle, $name, $label) {
  $field    = field_info_field($name);
  $instance = field_info_instance($entity_type, $name, $bundle);
  if (empty($field)) {
    $field = array(
      'field_name'   => $name,
      'type'         => 'text',
      'entity_types' => array($entity_type),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name'  => $name,
      'entity_type' => $entity_type,
      'bundle'      => $bundle,
      'label'       => $label,
      'widget'      => array('type' => 'text_textfield'),
      'display'     => array(
        'default' => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),
        'teaser'    => array(
          'label' => 'hidden',
          'type'  => 'text_default',
        ),
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
  @brief Creates a term reference field.
  @param $entity_type (string) the name of the entity type.
  @param $bundle (string) the name of the entity bundle.
  @param $name (string) the field name.
  @param $label (string) the field label.
  @param $machineName (string) the vocabulary
    machine name.
  @param $cardinality (int) the default
    cardinality. Default
    FIELD_CARDINALITY_UNLIMITED.
*/
function simple_field_create_term_reference ($entity_type, $bundle, $name, $label, $machineName, $cardinality = FIELD_CARDINALITY_UNLIMITED) {
  $field    = field_info_field ($name);
  $instance = field_info_instance ($entity_type, $name, $bundle);
  if (empty ($field)) {
    field_create_field (array (
      'field_name'   => $name,
      'type'         => 'taxonomy_term_reference',
      'entity_types' => array ($entity_type),
      'cardinality'  => $cardinality,
      'settings'     => array (
        'allowed_values' => array (
          array ('vocabulary' => $machineName,
                 'parent' => 0)
        ),
      )
    ));
  }
  if (empty ($instance)) {
    field_create_instance (array (
      'field_name'  => $name,
      'entity_type' => $entity_type,
      'bundle'      => $bundle,
      'label'       => $label,
      'widget'      => array (
        'type' => 'options_select',
      ),
      'settings'    => array (
        'text_processing' => true
      ),
      'display'     => array (
        'default' => array (
          'label' => 'above',
          'type'  => 'text',
          'default_formatter' => 'text_plain'
        ),
        'teaser'    => array (
          'label' => 'above',
          'type'  => 'text',
          'default_formatter' => 'text_plain'
        )
      )
    ));
  }
}

/**
  @brief Creats an entity reference field.
  @param $entity_type (string) the name of the entity type.
  @param $bundle (string) the name of the entity bundle.
  @param $name (string) the field name.
  @param $label (string) the field label.
  @param $target_bundles (array) the target bundles.
  @param $target_type (string) the target type.
  @param $cardinality (int) the default
    cardinality. Default
    FIELD_CARDINALITY_UNLIMITED.
*/
function simple_field_create_entity_reference ($entity_type, $bundle, $name, $label, $target_bundles = array (), $target_type = 'node', $cardinality = FIELD_CARDINALITY_UNLIMITED) {
  module_load_include ('module', 'entity_reference');
  $field    = field_info_field ($name);
  $instance = field_info_instance ($entity_type, $name, $bundle);
  if (empty ($field)) {
    field_create_field (array (
      'field_name'   => $name,
      'type'         => 'entityreference',
      'entity_types' => array ($entity_type),
      'cardinality'  => $cardinality,
      'settings'     => array (
        'target_type'      => $target_type,
        'handler_settings' => array (
          'target_bundles' => $target_bundles,
          'sort' => array ('type' => 'none')
    ))));
  }
  if (empty ($instance)) {
    field_create_instance (array (
      'field_name'   => $name,
      'entity_type'  => $entity_type,
      'bundle'       => $bundle,
      'label'        => $label,
      'widget'       => array ('type' => 'entityreference_autocomplete'),
      'display'      => array (
        'default' => array (
          'label' => 'Subject',
          'type'  => 'entityreference_entity_view'
      ))
    ));
  }
}

/**
  @brief Creates a date field and adds it to the
    content type.
  @param $entity_type (string) the name of the entity type.
  @param $bundle (string) the name of the entity bundle.
  @param $name (string) the field name.
  @param $label (string) the field label.
*/
function simple_field_create_date_field ($entity_type, $bundle, $name, $label) {
  $field    = field_info_field ($name);
  $instance = field_info_instance ($entity_type, $name, $bundle);
  if (empty ($field)) {
    field_create_field (array (
      'field_name'   => $name,
      'type'         => 'date',
      'entity_types' => array ($entity_type),
      'cardinality'  => 1
    ));
  }
  if (empty ($instance)) {
    field_create_instance (array (
      'field_name'  => $name,
      'entity_type' => $entity_type,
      'bundle'      => $bundle,
      'label'       => $label,
      'widget'      => array (
        'type' => 'date_select',
      ),
      'settings'    => array (
        'text_processing' => true
      ),
      'display'     => array (
        'default' => array (
          'label' => 'above',
          'type'  => 'date',
          'default_formatter' => 'date_default',
        ),
        'teaser'    => array (
          'label' => 'above',
          'type'  => 'date',
          'default_formatter' => 'date_default',
        )
      )
    ));
  }
}

/**
  @brief Creats a Relation Add field.
  @param $entity_type (string) the name of the entity type.
  @param $bundle (string) the name of the entity bundle.
  @param $name (string) the field name.
  @param $label (string) the field label.
  @param $relation_type (string) the relation type.
    Note that when referencing the reverse of a
    directional relation, append ":reverse".
  @param $cardinality (int) the default
    cardinality. Default
    FIELD_CARDINALITY_UNLIMITED.
  @param $entity_type (string) the entity type of
    the entity that this field will be attached to.
    Default 'node'.
*/
function simple_field_create_relation_field ($entity_type, $bundle, $name, $label, $relation_type, $cardinality = FIELD_CARDINALITY_UNLIMITED, $entity_type = 'node') {
  $field    = field_info_field($name);
  $instance = field_info_instance($entity_type, $name, $bundle);
  if (empty($field)) {
    $field = array(
      'field_name'   => $name,
      'type'         => 'relation_add',
      'cardinality'  => $cardinality,
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name'  => $name,
      'entity_type' => $entity_type,
      'bundle'      => $bundle,
      'label'       => $label,
      'widget'      => array(
        'type'     => 'relation_add',
        'settings' => array (
          'relation_endpoint_label_delta'  => false,
          'relation_endpoint_label'        => 'custom',
          'relation_endpoint_custom_label' => $label,
      )),
      'settings'    => array (
        'relation_type' => array (
          $relation_type => $relation_type
      )),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
  @brief Adds an entity id to an entity reference field.
  @param $id (integer) the entity id.
  @return (array) the field value.
*/
function simple_field_create_entity_reference_value ($id) {
  return array ('target_id' => $id);
}

/**
  @brief Returns a date field value.
  @param $year (int) the year.
  @param $month (int) the month.
  @param $day (int) the day.
  @return (array) the field value.
*/
function simple_field_create_date_field_value ($year, $month, $day) {
  return array (
    'value' => sprintf ('%04d-%02d-%02dT12:00:00', $year, $month, $day),
    'date_type' => 'date'
  );
}

/**
  @brief Accepts a node and a field name and returns the field's values.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the field values.
*/
function simple_field_get_field_values ($node, $field_name) {
  return $node && !empty ($node->{$field_name}) ?
           $node->{$field_name}['und'] :
           array ();
}

/**
  @brief Accepts a node and a field name and returns the field's first value.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the first field value.
*/
function simple_field_get_field_value ($node, $field_name) {
  $field_values = simple_field_get_field_values ($node, $field_name);
  return $field_values && is_array ($field_values) && !empty ($field_values) ?
           $field_values [0] :
           null;
}

/**
  @brief Accepts a node and an entity reference field name and returns its target ids.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the target ids.
*/
function simple_field_get_entity_reference_target_ids ($node, $field_name) {
  $target_ids = array ();
  foreach (simple_field_get_field_values ($node, $field_name) as $field_value) {
    $target_ids [] = $field_value ['target_id'];
  }
  return $target_ids;
}

/**
  @brief Accepts a node and an entity reference field name and returns its first target id.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (int) the first target id.
*/
function simple_field_get_entity_reference_target_id ($node, $field_name) {
  $target_ids = simple_field_get_entity_reference_target_ids ($node, $field_name);
  return empty ($target_ids) ? null : $target_ids [0];
}

/**
  @brief Accepts a node and a relation add field and returns its endpoint entity ids.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the entity ids.
*/
function simple_field_get_relation_endpoints ($node, $field_name) {
  $endpoints = array ();
  foreach (simple_field_get_field_values ($node, $field_name) as $field_value) {
    foreach ($field_value ['endpoints']['und'] as $endpoint) {
      $endpoints [] = $endpoint;
    }
  }
  return $endpoints;
}

/**
  @brief Accepts a node and a relation add field
    name and returns the source and target entity
    ids grouped together.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the entity ids.
*/
function simple_field_get_relation_entity_ids ($node, $field_name) {
  $entity_ids = array ();
  $endpoints = (array) simple_field_get_relation_endpoints ($node, $field_name);
  for ($i = 0; $i < count ($endpoints); $i += 2) {
    $entity_ids [] = array (
      $endpoints [$i]['entity_id'],
      $endpoints [$i + 1]['entity_id']
    );
  }
  return $entity_ids;
}

/**
  @brief Accepts a node and a relation add field name and returns the source entity ids of the referenced fields.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the source ids.
*/
function simple_field_get_relation_source_entity_ids ($node, $field_name) {
  $target_ids = array ();
  foreach ((array) simple_field_get_relation_entity_ids ($node, $field_name) as $endpoint_entity_ids) {
    $target_ids [] = $endpoint_entity_ids [0];
  }
  return $target_ids;
}

/**
  @brief Accepts a node and a relation add field name and returns the target entity ids of the referenced fields.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (array) the target ids.
*/
function simple_field_get_relation_target_entity_ids ($node, $field_name) {
  $target_ids = array ();
  foreach ((array) simple_field_get_relation_entity_ids ($node, $field_name) as $endpoint_entity_ids) {
    $target_ids [] = $endpoint_entity_ids [1];
  }
  return $target_ids;
}


/**
  @brief Accepts a node and a relation add field and returns the source entity id of its first endpoint.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (int) the entity id.
*/
function simple_field_get_relation_source_entity_id ($node, $field_name) {
  $endpoints = simple_field_get_relation_entity_ids ($node, $field_name);
  return empty ($endpoints) ? null : $endpoints [0][0];
}

/**
  @brief Accepts a node and a relation add field and returns the target entity id of its first endpoint.
  @param $node (node) the node.
  @param $field_name (string) the field name.
  @return (int) the entity id.
*/
function simple_field_get_relation_target_entity_id ($node, $field_name) {
  $endpoints = simple_field_get_relation_entity_ids ($node, $field_name);
  return empty ($endpoints) ? null : $endpoints [0][1];
}
