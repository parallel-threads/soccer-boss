<?php
/**
  @file
  @brief Defines the Simple Table theme function.
*/

/// Implements hook_theme ().
function simple_table_theme ($existing, $type, $theme, $path) {
  return array (
    'simple_table' => array (
      'render element' => '#simple_table',
  ));
}

/**
  @brief Implements theme_callback ().
  @details
    Accepts a render array that represents a simple
    table and returns an HTML string that
    represents the table.
  @note The render array must have the following
    structure:
    array ('#simple_table' =>
      array ('caption' => <caption>,
             'column_names' => array (<column name>, ...),
             'rows' => array (array (<field value>, ...), ...))
*/
function theme_simple_table (&$vars) {
  $table = $vars ['#simple_table'];

  $html = '<table><caption>' . $table ['caption'] . '</caption><thead><tr>';
  foreach ($table ['column_names'] as $column_name) {
    $html .= '<th>' . $column_name . '</th>';
  }
  $html .= '</tr></thead><tbody>';
  foreach ($table ['rows'] as $row) {
    $html .= '<tr>';
    foreach ($row as $field) {
      $html .= '<td>' . $field . '</td>';
    }
    $html .= '</tr>';
  }
  return $html . '</tbody></table>';
}

/**
  @brief Accepts a field values array and returns a
    render array that represents a table containing
    them.
  @param $data (array) the data array.
  @return (array) the render array.
  @note
    The data array must have the following
    form:
    array (
      'caption' => <caption>
      'columns' => array (
        'column_name' => <column name>,
        'weight'      => <weight>,
      ),
      'sort_column' => <column name>,
      'fields' => array (
         array ('column_name' => <column name>,
                'row_name'    => <row name>,
                'value'       => <field value>),
           ...
      ),
      'default_field_value_function => <callback (column_name, row_name) -> field_value>
    );
*/
function simple_table ($data) {

  $columns = isset ($data ['columns']) ? $data ['columns'] : array ();

  usort ($columns,
    create_function ('$x, $y', 'return $x [\'weight\'] > $y [\'weight\'];'));  

  $column_names = array_map (
    create_function ('$column', 'return $column [\'column_name\'];'),
    $columns);

  $rows = array ();
  foreach ($data ['fields'] as $field) {
    $column_names [] = $field ['column_name'];
    $rows [$field ['row_name']][$field ['column_name']] = $field ['value'];
  }

  $column_names = array_unique ($column_names);

  if (isset ($data ['sort_column'])) {
    usort ($rows,
      create_function ('$x, $y', 'return $x [\'' . $data ['sort_column'] . '\'] < $y [\'' . $data ['sort_column'] . '\'];'));
  }

  $table = array (
    'caption'      => isset ($data ['caption']) ? $data ['caption'] : '',
    'column_names' => $column_names,
    'rows'         => array ()
  );

  foreach ($rows as $row_name => $row) {
    $table_row = array ();
    foreach ($column_names as $column_name) {
      $table_row [] = isset ($row [$column_name]) ?
                        $row [$column_name] :
                        (isset ($data ['default_field_value_function']) ?
                           call_user_func ($data ['default_field_value_function'], $column_name, $row_name) :
                           '');
    }
    $table ['rows'][] = $table_row;
  }

  return array ('#simple_table' => $table);
}
