<?php
/**
  @file
  @brief Defines the Simple Table theme function.
  @note
    The Following Data structures are used
    throughout this module.

    1. Simple Table Render Arrays
       Simple Table Render Arrays must have the following structure:

         array ('#simple_table' =>
           array ('caption' => <caption>,
                  'column_names' => array (<column name>, ...),
                  'rows'         => array (array (<field value>, ...), ...),
                  'footer'       => array (<field value>, ...)
         ))

    2. Table Data Arrays.
       Table Data Arrays are used to describe
       tables in a slightly more abstract format.
       Each array must have the following structure.

         array (
           'caption' => <caption>
           'columns' => array (
             'column_name' => <column name>,
             'weight'      => <weight>,
           ),
           'sort_column' => <column name>,
           'fields' => array (
              array ('column_name' => <column name>,
                     'row_name'    => <row name>,
                     'value'       => <field value>),
                ...
           ),
           'default_field_value_function => <callback (column_name, row_name) -> field_value>

        note that 'footer' is a reserved row name,
        used to denote the table footer row.
*/

/// Implements hook_theme ().
function simple_table_theme ($existing, $type, $theme, $path) {
  return array (
    'simple_table' => array (
      'render element' => '#simple_table',
  ));
}

/**
  @brief Implements theme_callback ().
  @details
    Accepts a render array that represents a simple
    table and returns an HTML string that
    represents the table.
*/
function theme_simple_table (&$vars) {
  $table = $vars ['#simple_table'];

  $html = '<table><caption>' . $table ['caption'] . '</caption><thead><tr>';
  foreach ($table ['column_names'] as $column_name) {
    $html .= '<th>' . $column_name . '</th>';
  }
  $html .= '</tr></thead><tbody>';
  foreach ($table ['rows'] as $row) {
    $html .= '<tr>';
    foreach ($row as $field) {
      $html .= '<td>' . $field . '</td>';
    }
    $html .= '</tr>';
  }
  $html .= '</tbody>';
  if (!empty ($table ['footer'])) {
    $html .= '<tfoot>';
    foreach ($table ['footer'] as $field) {
      $html .= '<td>' . $field . '</td>';
    }
    $html .= '</tfoot>';
  }
  return $html . '</table>';
}

/**
  @brief Accepts a field values array and returns a
    render array that represents a table containing
    them.
  @param $data (array) the data array.
  @return (array) the render array.
  @note
    The data array must have the following
    form:
    );
*/
function simple_table ($data) {

  $columns = isset ($data ['columns']) ? $data ['columns'] : array ();

  usort ($columns,
    create_function ('$x, $y', 'return $x [\'weight\'] > $y [\'weight\'];'));  

  $column_names = array_map (
    create_function ('$column', 'return $column [\'column_name\'];'),
    $columns);

  $fields = isset ($data ['fields']) ? $data ['fields'] : array ();

  $rows = array ();
  foreach ($fields as $field) {
    $column_names [] = $field ['column_name'];
    $rows [$field ['row_name']][$field ['column_name']] = $field ['value'];
  }

  $column_names = array_unique ($column_names);

  if (isset ($data ['sort_column'])) {
    usort ($rows,
      create_function ('$x, $y', 'return $x [\'' . $data ['sort_column'] . '\'] < $y [\'' . $data ['sort_column'] . '\'];'));
  }

  $table = array (
    'caption'      => isset ($data ['caption']) ? $data ['caption'] : '',
    'column_names' => $column_names,
    'rows'         => array ()
  );

  foreach ($rows as $row_name => $row) {
    $table_row = array ();
    foreach ($column_names as $column_name) {
      $table_row [] = isset ($row [$column_name]) ?
                        $row [$column_name] :
                        (isset ($data ['default_field_value_function']) ?
                           call_user_func ($data ['default_field_value_function'], $column_name, $row_name) :
                           '');
    }
    if ($row_name == 'footer') {
      $table ['footer'] = $table_row;
    } else {
      $table ['rows'][] = $table_row;
    }
  }

  return array ('#simple_table' => $table);
}

/// The AJAX callback for the sort buttons in the Simple Table form.
function _simple_table_sort () {
  list ($form, $form_state) = ajax_get_form();

  // Set the sort column in the table data array.
  $form_state ['build_info']['args'][0]['sort_column'] = $form_state ['input']['_triggering_element_value'];

  // Force Drupal to create a new form rather than use a cached version.
  unset ($form_state ['input']['form_build_id']);

  // Create and return the new form.
  return drupal_build_form ('simple_table_form', $form_state);
}

/**
  @brief Returns a form that embeds a table.
  @param $data (array) the table data array.
  @return (array) the form.
*/
function simple_table_form ($form, $form_state, $data = null) {

  if (is_null ($data)) {
    return array ();
  }

  // I. Create the table form.

  // set a unique id to allow the AJAX wrapper to reference the entire form.
  $unique_form_id = drupal_html_id ($form_state ['build_info']['form_id']);

  $table = simple_table ($data);
  $table = $table ['#simple_table'];

  $form = array (
    '#prefix' => '<div id="' . $unique_form_id . '">',
    '#suffix' => '</div>',
    'table' => array (
      '#type'   => 'container',
      '#prefix' => '<table class="simple_table"><caption>' . $table ['caption'] . '</caption>',
      '#suffix' => '</table>',
      'header'  => array (
        '#type'   => 'container',
        '#prefix' => '<thead><tr>',
        '#suffix' => '</tr></thead>'
      ),
      'body'    => array (
        '#type'   => 'container',
        '#prefix' => '<tbody>',
        '#suffix' => '</tbody>'
      )
  ));

  // II. Render the table header.

  $column_offset = 0;
  $sort_column_offset = null;
  foreach ($table ['column_names'] as $column_name) {
    $is_sort_column = isset ($data ['sort_column']) && $column_name == $data ['sort_column'];
    if ($is_sort_column) {
      $sort_column_offset = $column_offset;
    }
    $column_element = array (
      '#type'   => 'button',
      '#prefix' => $is_sort_column ? '<th class="simple_table_sort_column_header">' : '<th>',
      '#suffix' => ($is_sort_column ? '<img class="simple_table_sort_icon" src="' . url (drupal_get_path ('module', 'simple_table') . '/theme/images/desc_sort_icon.png') . '">' : '') . '</th>',
      '#value'  => $column_name,
      'column_name' => array (
        '#type'  => 'hidden',
        '#value' => $column_name
      ),
      '#ajax' => array (
        'callback' => '_simple_table_sort',
        'wrapper'  => $unique_form_id
      )
    );

    $form ['table']['header'][] = $column_element;
    $column_offset ++;
  }

  // III. Render the table body.

  foreach ($table ['rows'] as $row) {
    $row_elem = array (
      '#prefix' => '<tr>',
      '#suffix' => '</tr>'
    );
    $field_offset = 0;
    foreach ($row as $field) {
      $is_sort_field = !is_null ($sort_column_offset) && $field_offset == $sort_column_offset;
      $field_elem = array (
        '#prefix' => $is_sort_field ? '<td class="simple_table_sort_column_field">' : '<td>',
        '#suffix' => '</td>',
        '#markup' => $field
      );
      $row_elem [] = $field_elem;
      $field_offset ++;
    }
    $form ['table']['body'][] = $row_elem;
  }

  // IV. Render the table footer.

  if (!empty ($table ['footer'])) {
    $form ['table']['footer'] = array (
      '#type'   => 'container',
      '#prefix' => '<tfoot>',
      '#suffix' => '</tfoot>'
    );
    $field_offset = 0;
    foreach ($table ['footer'] as $field) {
      $is_sort_field = !is_null ($sort_column_offset) && $field_offset == $sort_column_offset;
      $form ['table']['footer'][] = array (
        '#prefix' => $is_sort_field ? '<td class="simple_table_sort_column_field">' : '<td>',
        '#suffix' => '</td>',
        '#markup' => $field
      );
      $field_offset ++;
    }
  }
  return $form;
}
