<?php
/**
  @file
  @brief Defines the Simple Table API functions.
  @note
    The Following Data structures are used
    throughout this module.

    1. Simple Table Arrays
       Simple Table Arrays must have the following structure:

         array ('caption' => <caption>,                                    // required.
                'column_names' => array (<column name>, ...),              // required.
                'rows'         => array (array (<field value>, ...), ...), // required.
                'footer'       => array (<field value>, ...)               // optional.
         )

    2. Table Data Arrays.
       Table Data Arrays are used to describe
       tables in a slightly more abstract format.
       Each array must have the following structure.

         array (
           'module'  => '<module name>'                         // Required if you are using any callback functions. This is used to load the module's include file.
           'caption' => <caption>                               // required.
           'rows' => array (<row name>, ...),                   // optional.
           'columns' => array (                                 // optional.
             array (
               'column_name' => <column name>,                  // required.
               'weight'      => <weight>),                      // required.
             ...
           ),
           'sortable'    => <true|false>,                       // optional (default true). Whether or not users may change the sorting.
           'sort_column' => <column name>,                      // optional.
           'fields' => array (
              array ('column_name'   => <column name>,          // required.
                     'row_name'      => <row name>,             // required.
                     'value'         => <field value>,          // required.
                     'display_value' => <display field value>), // optional.
                ...
           ),
           'default_field_value_function'  => <callback (column_name, row_name) -> field_value> // optional.
           'default_field_value_arguments' => array (<additional argument>) // optional. Additional arguments to pass to the default value function.

        note that 'footer' is a reserved row name,
        used to denote the table footer row.

        note also that display_value may be a form
        element array as defined by the Form API.
        When it is, only the simple_table_form
        function may be used to render the data
        array. Otherwise, display_value should
        simply be a string.

        note also that PHP's function reference
        system is temperamental, you must make sure
        that you manually include any files that
        you need (preferably by calling
        module_load_include) within all of your
        callback functions.
*/

/**
  @brief Accepts a Table Data array and returns a
    render array that represents a table containing
    them.
  @param $data (array) the Tabe Data array.
  @return (array) the Simple Table Data array.
*/
function simple_table ($data) {
  $columns = isset ($data ['columns']) ? $data ['columns'] : array ();

  usort ($columns,
    create_function ('$x, $y', 'return $x [\'weight\'] > $y [\'weight\'];'));  

  $column_names = array_map (
    create_function ('$column', 'return $column [\'column_name\'];'),
    $columns);

  $fields = isset ($data ['fields']) ? $data ['fields'] : array ();

  $rows = array ();
  if (isset ($data ['rows'])) {
    foreach ($data ['rows'] as $row_name) {
      $rows [$row_name] = array ();
    }
  }
  foreach ($fields as $field) {
    $column_names [] = $field ['column_name'];
    $rows [$field ['row_name']][$field ['column_name']]
      = array (
          'value'         => $field ['value'],
          'display_value' => isset ($field ['display_value']) ? $field ['display_value'] : $field ['value']
        );
  }

  $column_names = array_unique ($column_names);

  if (isset ($data ['sort_column'])) {
    uasort ($rows,
      create_function ('$x, $y', 'return $x [\'' . $data ['sort_column'] . '\'][\'value\'] < $y [\'' . $data ['sort_column'] . '\'][\'value\'];'));
  }
  $table = array (
    'caption'      => isset ($data ['caption']) ? $data ['caption'] : '',
    'column_names' => $column_names,
    'rows'         => array ()
  );
  foreach ($rows as $row_name => $row) {
    $table_row = array ();
    foreach ($column_names as $column_name) {
      $field_value = '';
      if (isset ($row [$column_name])) {
        $field_value = $row [$column_name]['display_value'];
      } else {
        if (isset ($data ['default_field_value_function'])) {
          $function = $data ['default_field_value_function'];
          $arguments = array (
            $column_name,
            $row_name,
          );
          if (isset ($data ['default_field_value_arguments'])) {
            $arguments = array_merge ($arguments, $data ['default_field_value_arguments']);
          }
          module_load_include ('inc', $data ['module']);
          $field_value = is_callable ($function) ? call_user_func_array ($function, $arguments) : 'default';
        }
      }
      $table_row [] = $field_value;
    }
    if ($row_name == 'footer') {
      $table ['footer'] = $table_row;
    } else {
      $table ['rows'][] = $table_row;
    }
  }
  return $table;
}

/// The AJAX callback for the sort buttons in the Simple Table form.
function _simple_table_sort () {
  list ($form, $form_state) = ajax_get_form();

  // Set the sort column in the table data array.
  $form_state ['build_info']['args'][0]['sort_column'] = $form_state ['input']['_triggering_element_value'];

  // Force Drupal to create a new form rather than use a cached version.
  unset ($form_state ['input']['form_build_id']);

  // Create and return the new form.
  return drupal_build_form ('simple_table_form', $form_state);
}

/**
  @brief Returns a form that embeds a table.
  @param $data (array) the table data array.
  @return (array) the form.
*/
function simple_table_form ($form, $form_state, $data = null) {

  if (is_null ($data)) {
    return array ();
  }

  // I. Create the table form.

  // set a unique id to allow the AJAX wrapper to reference the entire form.
  $unique_form_id = drupal_html_id ($form_state ['build_info']['form_id']);

  $table = simple_table ($data);

  $form = array (
    '#prefix' => '<div id="' . $unique_form_id . '">',
    '#suffix' => '</div>',
    'table' => array (
      '#type'   => 'container',
      '#prefix' => '<table class="simple_table"><caption>' . $table ['caption'] . '</caption>',
      '#suffix' => '</table>',
      'header'  => array (
        '#type'   => 'container',
        '#prefix' => '<thead><tr>',
        '#suffix' => '</tr></thead>'
      ),
      'body'    => array (
        '#type'   => 'container',
        '#prefix' => '<tbody>',
        '#suffix' => '</tbody>'
      )
  ));

  // II. Render the table header.

  $column_offset = 0;
  $sortable = !isset ($data ['sortable']) || $data ['sortable'];
  $sort_column_offset = null;
  foreach ($table ['column_names'] as $column_name) {
    $is_sort_column = isset ($data ['sort_column']) && $column_name == $data ['sort_column'];
    if ($is_sort_column) {
      $sort_column_offset = $column_offset;
    }
    $column_element = array (
      '#prefix' => $sortable && $is_sort_column ? '<th class="simple_table_sort_column_header">' : '<th>',
      '#suffix' => ($sortable && $is_sort_column ? '<img class="simple_table_sort_icon" src="' . url (drupal_get_path ('module', 'simple_table') . '/theme/images/desc_sort_icon.png') . '">' : '') . '</th>',
    );
    if ($sortable) {
      $column_element ['#type']  = 'button';
      $column_element ['#value'] = $column_name;
      $column_element ['#ajax']  = array (
        'callback' => '_simple_table_sort',
        'wrapper'  => $unique_form_id
      );
    } else {
      $column_element ['#markup']  = $column_name;
    }
    $form ['table']['header'][] = $column_element;
    $column_offset ++;
  }

  // III. Render the table body.

  foreach ($table ['rows'] as $row) {
    $row_elem = array (
      '#prefix' => '<tr>',
      '#suffix' => '</tr>'
    );
    $field_offset = 0;
    foreach ($row as $field) {
      $is_sort_field = !is_null ($sort_column_offset) && $field_offset == $sort_column_offset;
      $field_elem = array (
        '#prefix' => $sortable && $is_sort_field ? '<td class="simple_table_sort_column_field">' : '<td>',
        '#suffix' => '</td>',
        'field'   => is_array ($field) ? $field : array ('#markup' => $field)
      );
      $row_elem [] = $field_elem;
      $field_offset ++;
    }
    $form ['table']['body'][] = $row_elem;
  }

  // IV. Render the table footer.

  if (!empty ($table ['footer'])) {
    $form ['table']['footer'] = array (
      '#type'   => 'container',
      '#prefix' => '<tfoot><tr>',
      '#suffix' => '</tr></tfoot>'
    );
    $field_offset = 0;
    foreach ($table ['footer'] as $field) {
      $is_sort_field = !is_null ($sort_column_offset) && $field_offset == $sort_column_offset;
      $form ['table']['footer'][] = array (
        '#prefix' => $is_sort_field ? '<td class="simple_table_sort_column_field">' : '<td>',
        '#suffix' => '</td>',
        'field' => is_array ($field) ? $field : array ('#markup' => $field)
      );
      $field_offset ++;
    }
  }
  return $form;
}
