<?php
/**
  @file
*/

/// Implements hook_view_api ().
function soccer_boss_views_api () {
  return array ('api' => 3.0);
}

/**
  @brief Implements hook_block_info_alter ().
  @details
    Enables the core blocks and moves them to their
    designated regions.
  @see soccer_boss_block_settings ().
  @see soccer_boss_set_block_visibilities ().
*/
function soccer_boss_block_info_alter (&$blocks, $theme, $code_blocks) {
  module_load_include ('inc', 'soccer_boss');

  foreach (soccer_boss_block_settings () as $delta => $settings) {
    $module = $settings ['module'];

    if (empty ($blocks [$module][$delta]['pages'])) {
      $blocks [$module][$delta]['status']     = 1;
      $blocks [$module][$delta]['region']     = $settings ['region'];
      $blocks [$module][$delta]['visibility'] = 1;

      $blocks [$module][$delta]['pages'] = isset ($settings ['pages']) ? $settings ['pages'] : 'node/*';

      if (isset ($settings ['weight'])) {
        $blocks [$module][$delta]['weight']   = $settings ['weight'];
      }
    }
  }

}

/// Implements hook_menu ().
function soccer_boss_menu () {
  return array (
    // I. Player pages.
    'node/%node/team' => array (
      'title'            => t ('Team'),
      'description'      => t ('Redirects the user to the player\'s team page.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_player'),
      'page callback'    => 'soccer_boss_player_team_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 1
    ),
    'player-comparison' => array (
      'title'            => t ('Player Comparison'),
      'description'      => t ('Displays two players side-by-side for comparison.'),
      'access callback'  => true,
      'page callback'    => 'soccer_boss_player_comparison',
      'page arguments'   => array (1, 2),
      'type'             => MENU_CALLBACK,
      'file'             => 'soccer_boss.page.inc',
    ),
    'node/%node/bio' => array (
      'title'            => t ('Player Bio'),
      'description'      => t ('The player bio page.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_player'),
      'page callback'    => 'soccer_boss_player_bio_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 5
    ),
    'node/%node/fitness' => array (
      'title'            => t ('Player Fitness'),
      'description'      => t ('Displays the player fitness stats.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_player'),
      'page callback'    => 'soccer_boss_player_fitness_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 6
    ),
    // II. Team pages.
    'node/%node/overview' => array (
      'title'            => t ('Team Overview'),
      'description'      => t ('The team overview page.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team'),
      'page callback'    => 'soccer_boss_team_overview_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 6
    ),
    'team-comparison' => array (
      'title'            => t ('Team Comparison'),
      'description'      => t ('Displays two teams side-by-side for comparison.'),
      'access callback'  => true,
      'page callback'    => 'soccer_boss_team_comparison',
      'page arguments'   => array (1, 2),
      'type'             => MENU_CALLBACK,
      'file'             => 'soccer_boss.page.inc',
    ),
    'node/%node/team-player-stats' => array (
      'title'            => t ('Team Player Stats'),
      'description'      => t ('Displays the performance stats for each player on the team.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team'),
      'page callback'    => 'soccer_boss_team_player_stats_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc'
    ),
    'node/%node/add-team-player-stats' => array (
      'title'            => t ('Add Team Player Stats'),
      'description'      => t ('Displays a form in which player performance stats can be added.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team', 'create any soccer_boss_pps content'),
      'page callback'    => 'soccer_boss_add_team_player_stats_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
    ),
    'node/%node/add-team-stats' => array (
      'title'            => t ('Add Team Stats'),
      'description'      => t ('Displays a form to enter team stats.'),
      'access callback'  => 'soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team', 'create any soccer_boss_pps content'),
      'page callback'    => '',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc'
    ),
    'player-comparison-form' => array (
      'title'            => t ('Player Comparison'),
      'description'      => t ('Lets users select players to compare.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_player_comparison_form'),
      'type'             => MENU_NORMAL_ITEM
    ),
    'team-comparison-form' => array (
      'title'            => t ('Team Comparison'),
      'description'      => t ('Lets users select teams to compare.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_team_comparison_form'),
      'type'             => MENU_NORMAL_ITEM
    ),
    'team-player-stats-form/%' => array (
      'title'            => t ('Team Player Stats'),
      'description'      => t ('The Team Player Stats form.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_team_player_stats_form', 1),
      'type'             => MENU_NORMAL_ITEM
    ),
    'node/%node/add-player-fitness-stats' => array (
      'title'            => t ('Add Player Fitness Stats'),
      'description'      => t ('Displays a form in which a player can add fitness stats.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_player', 'create any soccer_boss_pps content'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_pfs_form', 1),
      'type'             => MENU_LOCAL_TASK
    )
  );
}

/**
  @brief Defines a menu access callback that
    returns true iff the given node has the given
    type.
  @param $node (object) the referenced node.
  @param $type (string) the required node type.
  @param $privilege (string) an optional privilege to check.
  @return (boolean).
*/
function _soccer_boss_check_type ($node, $type, $privilege = false) {
  return $node->type == $type && ($privilege ? user_access ($privilege) : true);
}

// ----- II. Comparison Forms ----- 

/**
  @brief
    Returns the Player Comparison form. The form is
    used to select players to compare on the player
    comparison page.
*/
function soccer_boss_player_comparison_form ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  return array (
    'player_x' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('First Player'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_PLAYER_TYPE),
      '#era_cardinality' => 1
    ),
    'player_y' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('Second Player'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_PLAYER_TYPE),
      '#era_cardinality' => 1
    ),
    'submit' => array (
      '#type'  => 'submit',
      '#value' => 'Compare!'
    )
  );
}

/**
  @brief Processes a Player Comparison Form
    submission and redirects the user to the Player
    Comparison Page.
*/
function soccer_boss_player_comparison_form_submit ($form, &$form_state) {
  drupal_goto ('player-comparison/' . 
    $form_state ['values']['player_x']['entity_id'] . '/' .
    $form_state ['values']['player_y']['entity_id']
  );
}

/**
  @brief
    Returns the Team Comparison form. The form is
    used to select teams to compare on the Team 
    Comparison page.
*/
function soccer_boss_team_comparison_form ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  return array (
    'team_x' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('First Team'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_TEAM_TYPE),
      '#era_cardinality' => 1
    ),
    'team_y' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('Second Team'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_TEAM_TYPE),
      '#era_cardinality' => 1
    ),
    'submit' => array (
      '#type'  => 'submit',
      '#value' => 'Compare!'
    )
  );
}

/**
  @brief Processes a Team Comparison Form
    submission and redirects the user to the Team
    Comparison Page.
*/
function soccer_boss_team_comparison_form_submit ($form, &$form_state) {
  watchdog (
    'soccer_boss',
    '[soccer_boss_player_comparison_form_submit] values: <pre>@values</pre>',
    array (
      '@values' => print_r ($form_state ['values'], true)
  ));

  drupal_goto ('team-comparison/' . 
    $form_state ['values']['team_x']['entity_id'] . '/' .
    $form_state ['values']['team_y']['entity_id']
  );
}

// ----- III. Stat Sheets -----

/**
  @brief Creates a stat sheet organized into a spreadsheet
  @param $info (array) the spreadsheet description.
  @note $info has the following structure:
    array (
      'columns'  => array (<stat name> => <header label>, ...)
      'entities' => array (<entity>, ...)
    )
*/
function soccer_boss_create_stat_sheet ($info) {
  // I. Define the table headers.
  $prefix = '<table><thead><tr><th>Name</th>';
  foreach (array_values ($info ['columns']) as $label) {
    $prefix .= "<th>$label</th>";
  }
  $prefix .= '</tr></thead><tbody>';

  $form = array (
    '#prefix'     => $prefix,
    '#suffix'     => '</tbody></table>',
    '#attributes' => array (
      'class' => array ('statsheet-table')
    )
  );

  // II. Define the table rows.
  foreach ($info ['entities'] as $entity) {
    $entity_id    = entity_id    ('node', $entity);
    $entity_label = entity_label ('node', $entity);

    // II.A. Define the table row.
    $form [$entity_id . '_row'] = array (
      '#prefix'     => "<tr><td>$entity_label</td>",
      '#suffix'     => '</tr>',
      '#type'       => 'fieldset',
      '#attributes' => array (
        'class' => array ('statsheet-row')
      )
    );

    // II.B. Define table cells.
    foreach (array_keys ($info ['columns']) as $stat_name) {
      $form [$entity_id . '_row'][$entity_id . '_' . $stat_name] = array (
        '#prefix'     => '<td>',
        '#suffix'     => '</td>',
        '#type'       => 'textfield',
        '#attributes' => array (
          'class' => array ('statsheet-cell')
        )
      ); 
    }
  }

  $form ['submit'] = array (
    '#type'  => 'submit',
    '#value' => 'Save'
  );

  return $form;
}

/**
  @brief Accepts a stat sheet form and creates
    stats for the values listed in the form.
  @param $form_values (array) the form values.
*/
function soccer_boss_process_stat_sheet ($info, $form_values) {
  $values = array ();
  foreach ($info ['entities'] as $entity) {
    $entity_id = entity_id ('node', $entity);

    foreach ($form_values as $key => $value) {
      if (0 === strpos ($key, $entity_id, 0) && $value !== '') {
        $i = strpos ($key, '_', 0);
        $stat_name = substr ($key, $i + 1);
        $values [$entity_id][$stat_name] = array (
          'label' => $info ['columns'][$stat_name],
          'value' => $value
        );
      }
    }
  }
  return $values;
}

/**
  @brief Creates the Team Player Stats form.
  @param $form (array) the initial form.
  @param $form_state (array) the initial form state.
  @param $team_nid (integer) the team node id.
  @return (array) the form array.
*/
function soccer_boss_team_player_stats_form ($form, &$form_state, $team_nid) {
  module_load_include ('inc', 'soccer_boss');

  $player_nids = soccer_boss_get_references (
    $team_nid,
    'node',
    'soccer_boss_player_team'
  );

  $info = array (
    'columns' => array (
      'goals'         => 'Goals',
      'shots'         => 'Shots',
      'goal_shots'    => 'Shots on Goal',
      'shots_against' => 'Shots Against',
      'assists'       => 'Assists',
      'yellow_cards'  => 'Yellow Cards',
      'red_cards'     => 'Red Cards',
      'shutouts'      => 'Shutouts'
    ),
    'entities' => node_load_multiple ($player_nids)
  );

  $form_state ['soccer_boss_info'] = $info;

  $form = array (
    'year' => array (
      '#type'            => 'textfield',
      '#title'           => t ('Year'),
      '#required'        => true
  ));
  $form += soccer_boss_create_stat_sheet ($info);
  return $form;
}

/**
  @brief Processes the Team Player Stats form.
*/
function soccer_boss_team_player_stats_form_submit ($form, $form_state) {
  $values = soccer_boss_process_stat_sheet (
    $form_state ['soccer_boss_info'],
    $form_state ['values']
  );

  foreach ($values as $entity_id => $stat_values) {
    foreach ($stat_values as $stat_name => $stat_value) {
      $node = new stdClass ();
      $node->type = soccer_boss_PPS_TYPE;
      node_object_prepare ($node);

      $node->title = $stat_value ['label'];
      $node->soccer_boss_pps_player ['und'][0]['target_id'] = $entity_id;
      $node->soccer_boss_pps_year   ['und'][0] = array (
        'value'  => $form_state ['values']['year'],
        'format' => 'plain_text'
      );
      $node->soccer_boss_pps_value  ['und'][0] = array (
        'value'  => $stat_value ['value'],
        'format' => 'plain_text'
      );

      node_save ($node);
    }
  }
}

/**
  @brief Defines the Player Fitness Stats form.
*/
function soccer_boss_pfs_form ($form, $form_state, $player_node) {
  return array (
    'player' => array (
      '#type'  => 'value',
      '#value' => $player_node->nid
    ),
    'date' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Date'),
      '#description'   => t ('The Date on which these stats were measured or applied.'),
      '#default_value' => date ('D, d M Y H:i:s'),
      '#required'      => true
    ),
    'mile_time' => array (
      '#type'  => 'textfield',
      '#title' => t ('Mile Time')
    ),
    'two_mile_time' => array (
      '#type'  => 'textfield',
      '#title' => t ('Two Mile Time')
    ),
    'dash_time' => array (
      '#type'  => 'textfield',
      '#title' => t ('60 yard dash time')
    ),
    'bench_press' => array (
      '#type'  => 'textfield',
      '#title' => t ('Bench press')
    ),
    'squat' => array (
      '#type'  => 'textfield',
      '#title' => t ('Squat')
    ),
    'juggles' => array (
      '#type'  => 'textfield',
      '#title' => t ('Juggles')
    ),
    'submit' => array (
      '#type'  => 'submit',
      '#value' => 'Save'
  ));
}

/**
  @brief Processes the Player Fitness Stats form.
*/
function soccer_boss_pfs_form_submit ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  foreach (array (
    'mile_time'     => t ('Mile Time'),
    'two_mile_time' => t ('Two Mile Time'),
    'dash_time'     => t ('Dash Time'),
    'bench_press'   => t ('Bench Press'),
    'squat'         => t ('Squat'),
    'juggles'       => t ('Juggles')
  ) as $stat_name => $stat_label) {
    $node = new stdClass ();
    $node->type = soccer_boss_PFS_TYPE;
    node_object_prepare ($node);

    $node->title = $stat_label;
    $node->soccer_boss_pfs_player ['und'][0]['target_id'] = $form_state ['values']['player'];
    $node->soccer_boss_pfs_value  ['und'][0] = array (
      'value'  => $form_state ['values'][$stat_name],
      'format' => 'plain_text'
    );

    $date = strtotime ($form_state ['values']['date']);

    $node->soccer_boss_pfs_date   ['und'][0] = array (
      'value'     => $date,
      'date_type' => 'date'
    );

    node_save ($node);
  }
}
