<?php
/**
  @file
*/

/// Implements hook_view_api ().
function soccer_boss_views_api () {
  return array ('api' => 3.0);
}

/**
  @brief Implements hook_block_info_alter ().
  @details
    Enables the core blocks and moves them to their
    designated regions.
  @see soccer_boss_block_settings ().
  @see soccer_boss_set_block_visibilities ().
*/
function soccer_boss_block_info_alter (&$blocks, $theme, $code_blocks) {
  module_load_include ('inc', 'soccer_boss');

  foreach (soccer_boss_block_settings () as $delta => $settings) {
    $module = $settings ['module'];

    if (empty ($blocks [$module][$delta]['pages'])) {
      $blocks [$module][$delta]['status']     = 1;
      $blocks [$module][$delta]['region']     = $settings ['region'];
      $blocks [$module][$delta]['visibility'] = 1;
      $blocks [$module][$delta]['pages']      = 'node/*';
    }
  }
}

/// Implements hook_menu ().
function soccer_boss_menu () {
  return array (
    // I. Defines the Coach menu tabs.
    'node/%node/team' => array (
      'title'            => t ('Team'),
      'description'      => t ('Redirects the user to the team associated with the given coach\'s node id.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_coach'),
      'page callback'    => 'soccer_boss_coach_team_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 1
    ),
    // II. Defines the Player menu tabs.
    'node/%node/stats' => array (
      'title'            => t ('Stats'),
      'description'      => t ('Redirects the user to the stats page.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_player'),
      'page callback'    => 'soccer_boss_player_stats_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 1
    ),
    'node/%node/team' => array (
      'title'            => t ('Team'),
      'description'      => t ('Redirects the user to the player\'s team page.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_player'),
      'page callback'    => 'soccer_boss_player_team_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 1
    ),
    // III. Defines the Team menu tabs.
    'node/%node/coach' => array (
      'title'            => t ('Coach'),
      'description'      => t ('Displays information about the team\'s coach.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team'),
      'page callback'    => 'soccer_boss_team_coach_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 1
    ),
    'node/%node/roster' => array (
      'title'            => t ('Roster'),
      'description'      => t ('Lists the team\'s players.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team'),
      'page callback'    => 'soccer_boss_team_roster_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 2
    ),
    'node/%node/games' => array (
      'title'            => t ('Matches'),
      'description'      => t ('Lists the team\'s past and upcoming matches.'),
      'access callback'  => '_soccer_boss_check_type',
      'access arguments' => array (1, 'soccer_boss_team'),
      'page callback'    => 'soccer_boss_team_games_page',
      'page arguments'   => array (1),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'soccer_boss.page.inc',
      'weight'           => 3
    ),
    'player-comparison' => array (
      'title'            => t ('Player Comparison'),
      'description'      => t ('Displays two players side-by-side for comparison.'),
      'access callback'  => true,
      'page callback'    => 'soccer_boss_player_comparison',
      'page arguments'   => array (1, 2),
      'type'             => MENU_CALLBACK,
      'file'             => 'soccer_boss.page.inc',
    ),
    'team-comparison' => array (
      'title'            => t ('Team Comparison'),
      'description'      => t ('Displays two teams side-by-side for comparison.'),
      'access callback'  => true,
      'page callback'    => 'soccer_boss_team_comparison',
      'page arguments'   => array (1, 2),
      'type'             => MENU_CALLBACK,
      'file'             => 'soccer_boss.page.inc',
    ),
    'player-comparison-form' => array (
      'title'            => t ('Player Comparison'),
      'description'      => t ('Lets users select players to compare.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_player_comparison_form'),
      'type'             => MENU_NORMAL_ITEM
    ),
    'team-comparison-form' => array (
      'title'            => t ('Team Comparison'),
      'description'      => t ('Lets users select teams to compare.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_team_comparison_form'),
      'type'             => MENU_NORMAL_ITEM
    ),
    'player-stats-form' => array (
      'title'            => t ('Player Stats'),
      'description'      => t ('The Player Stats form.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_player_stats_form'),
      'type'             => MENU_NORMAL_ITEM
    ),
    'team-stats-form' => array (
      'title'            => t ('Team Stats'),
      'description'      => t ('The Team Stats form.'),
      'access callback'  => true,
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array ('soccer_boss_team_stats_form'),
      'type'             => MENU_NORMAL_ITEM
    )
  );
}

/**
  @brief Defines a menu access callback that
    returns true iff the given node has the given
    type.
  @param $node (object) the referenced node.
  @param $type (string) the required node type.
  @return (boolean).
*/
function _soccer_boss_check_type ($node, $type) {
  return $node->type == $type;
}

// ----- II. Comparison Forms ----- 

/**
  @brief
    Returns the Player Comparison form. The form is
    used to select players to compare on the player
    comparison page.
*/
function soccer_boss_player_comparison_form ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  return array (
    'player_x' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('First Player'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_PLAYER_TYPE),
      '#era_cardinality' => 1
    ),
    'player_y' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('Second Player'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_PLAYER_TYPE),
      '#era_cardinality' => 1
    ),
    'submit' => array (
      '#type'  => 'submit',
      '#value' => 'Compare!'
    )
  );
}

/**
  @brief Processes a Player Comparison Form
    submission and redirects the user to the Player
    Comparison Page.
*/
function soccer_boss_player_comparison_form_submit ($form, &$form_state) {
  watchdog (
    'soccer_boss',
    '[soccer_boss_player_comparison_form_submit] values: <pre>@values</pre>',
    array (
      '@values' => print_r ($form_state ['values'], true)
  ));

  drupal_goto ('player-comparison/' . 
    $form_state ['values']['player_x']['entity_id'] . '/' .
    $form_state ['values']['player_y']['entity_id']
  );
}

/**
  @brief
    Returns the Team Comparison form. The form is
    used to select teams to compare on the Team 
    Comparison page.
*/
function soccer_boss_team_comparison_form ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  return array (
    'team_x' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('First Team'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_TEAM_TYPE),
      '#era_cardinality' => 1
    ),
    'team_y' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('Second Team'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_TEAM_TYPE),
      '#era_cardinality' => 1
    ),
    'submit' => array (
      '#type'  => 'submit',
      '#value' => 'Compare!'
    )
  );
}

/**
  @brief Processes a Team Comparison Form
    submission and redirects the user to the Team
    Comparison Page.
*/
function soccer_boss_team_comparison_form_submit ($form, &$form_state) {
  watchdog (
    'soccer_boss',
    '[soccer_boss_player_comparison_form_submit] values: <pre>@values</pre>',
    array (
      '@values' => print_r ($form_state ['values'], true)
  ));

  drupal_goto ('team-comparison/' . 
    $form_state ['values']['team_x']['entity_id'] . '/' .
    $form_state ['values']['team_y']['entity_id']
  );
}

// ----- III. Stat Sheets -----

/**
  @brief Processes the values within a Stats Sheet.
  @param $form_values (array) the form values from a Stats Sheet.
  @param $mappings (array) an associative array
    describing the mappings between sheet fields
    and stat names.
*/
function soccer_boss_process_stat_sheet ($form_values, $mapping) {
  module_load_include ('inc', 'stats');

  watchdog (
    'soccer_boss',
    '[soccer_boss_process_stat_sheet] form values: <pre>@form_values</pre>',
    array (
      '@form_values' => print_r ($form_values, true)
  ));

  foreach ($mapping as $field_name => $stat_name) {
    // I. Skip the stat iff the field is empty.
    if (empty ($form_values [$field_name])) {
      continue;
    }

    // II. Retrieve the stat if it exists.
    $subject = $form_values ['entity']['entity_id'];

    $stats = stats_load_multiple (stats_get_stats_by_name_and_subject ($stat_name, $subject));
    $stat = null;

    // III. Create the stat if it does not exist.
    if (empty ($stats)) {
      $stat = entity_create ('stat', array ('type' => 'stat'));

      $stat->name    = $stat_name;
      $stat->subject = $subject;

      stats_save ($stat);
    } else {
      $stat = array_shift ($stats);
    }

    // IV. Create the stat value.
    $stat_value = entity_create ('stat_value', array ('type' => 'stat_value'));

    $stat_value->stat    = $stat->id;
    $stat_value->content = $form_values [$field_name];
    $stat_value->date    = strtotime ($form_values ['date'] . ' 12:00');

    stats_value_save ($stat_value);
  }
} 

/**
  @brief Returns the Player Stats form.
  @details
    The Player Stats form represents a 'stat sheet',
    a form that creates multiple related stats that
    are associated with a single entity.
*/
function soccer_boss_player_stats_form ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  return array (
    'entity' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('Player'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_PLAYER_TYPE),
      '#era_cardinality' => 1,
      '#cardinality'     => 1,
      '#required'        => true
    ),
    'date' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Date'),
      '#description'   => t ('The date on which these stat values were measured, reported, or applied.'),
      '#default_value' => date ('F j, Y'),
      '#required'      => true      
    ),
    'goals' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Goals'),
      '#description'   => t ('The number of goals scored by this player.')
    ),
    'goals_against' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Goals Against'),
      '#description'   => t ('The number of goals scored against this player (for Goal Keepers).')
    ),
    'shots' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Shots'),
      '#description'   => t ('The number of shots made by this player.')
    ),
    'goal_shots' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Goal Shots'),
      '#description'   => t ('The number of goal shots made by this player.')
    ),
    'assists' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Assists'),
      '#description'   => t ('The number of assists made by this player.')
    ),
    'saves' => array (
      '#type'           => 'textfield',
      '#title'          => t ('Saves'),
      '#description'    => t ('The number of saves made by this player (for Goal Keepers).')
    ),
    'shutouts' => array (
      '#type'           => 'textfield',
      '#title'          => t ('Shutouts'),
      '#description'    => t ('The number of shutouts by this player (for Goal Keepers).')
    ),
    'submit' => array (
      '#type'           => 'submit',
      '#value'          => 'Save'
  ));
}

/**
  @brief Processes the Player Stats form.
  @details
    Creates Stats for each of the fields.
*/
function soccer_boss_player_stats_form_submit ($form, &$form_state) {
  soccer_boss_process_stat_sheet (
    $form_state ['values'],
    array (
      'goals'         => 'Goals',
      'goals_against' => 'Goals Against',
      'shots'         => 'Shots',
      'goal_shots'    => 'Goal Shots',
      'assists'       => 'Assists',
      'saves'         => 'Saves',
      'shutouts'      => 'Shutouts'
  ));
}

/**
  @brief Returns the Team Stats form.
  @details
    The Team Stats form represents a 'stat sheet',
    a form that creates multiple related stats that
    are associated with a single entity.
*/
function soccer_boss_team_stats_form ($form, &$form_state) {
  module_load_include ('inc', 'soccer_boss');

  return array (
    'entity' => array (
      '#type'            => 'entityreference',
      '#title'           => t ('Team'),
      '#era_entity_type' => 'node',
      '#era_bundles'     => array (soccer_boss_TEAM_TYPE),
      '#era_cardinality' => 1,
      '#cardinality'     => 1,
      '#required'        => true
    ),
    'date' => array (
      '#type'        => 'textfield',
      '#title'       => t ('Date'),
      '#description'   => t ('The date on which these stat values were measured, reported, or applied.'),
      '#default_value' => date ('F j, Y'),
      '#required'      => true      
    ),
    'goals' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Goals'),
      '#description'   => t ('The number of goals scored by this team.')
    ),
    'goals_against' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Goals Against'),
      '#description'   => t ('The number of goals scored against this team.')
    ),
    'shots' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Shots'),
      '#description'   => t ('The number of shots made by this team.')
    ),
    'goal_shots' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Goal Shots'),
      '#description'   => t ('The number of goal shots made by this team.')
    ),
    'shots_against' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Shots Against'),
      '#description'   => t ('The number of shots made against this team.')
    ),
    'assists' => array (
      '#type'          => 'textfield',
      '#title'         => t ('Assists'),
      '#description'   => t ('The number of assists made by this team.')
    ),
    'shutouts' => array (
      '#type'           => 'textfield',
      '#title'          => t ('Shutouts'),
      '#description'    => t ('The number of shutouts by this team.')
    ),
    'games_won' => array (
      '#type'           => 'textfield',
      '#title'          => t ('Games Won'),
      '#description'    => t ('The number of games won by this team.')
    ),
    'games_lost' => array (
      '#type'           => 'textfield',
      '#title'          => t ('Games Lost'),
      '#description'    => t ('The number of games lost by this team.')
    ),
    'submit' => array (
      '#type'           => 'submit',
      '#value'          => 'Save'
  ));
}

/**
*/
function soccer_boss_team_stats_form_submit ($form, &$form_state) {
  soccer_boss_process_stat_sheet (
    $form_state ['values'],
    array (
      'goals'         => 'Goals',
      'goals_against' => 'Goals Against',
      'shots'         => 'Shots',
      'goal_shots'    => 'Goal Shots',
      'shots_against' => 'Shots Against',
      'assists'       => 'Assists',
      'shutouts'      => 'Shutouts',
      'games_won'     => 'Games Won',
      'games_lost'    => 'Games Lost'
  ));
}
